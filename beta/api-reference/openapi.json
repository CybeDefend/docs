{
    "openapi": "3.0.0",
    "paths": {
      "/": {
        "get": {
          "operationId": "AppController_getHello",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          }
        }
      },
      "/organization/{organizationId}/invite": {
        "post": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Invite user to organization",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteBodyDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User invited to organization",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationInviteResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}/invitations": {
        "get": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Get organization invitations",
          "parameters": [
            {
              "description": "Page number",
              "required": true,
              "name": "page",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Number of items per page",
              "required": true,
              "name": "pageSize",
              "in": "query",
              "schema": {
                "minimum": 1,
                "maximum": 20,
                "type": "number"
              }
            },
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Organization invitations retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetOrganizationInvitationsResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}/invitation/{invitationId}": {
        "delete": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Cancel organization invitation",
          "parameters": [
            {
              "name": "invitationId",
              "required": true,
              "in": "path",
              "description": "Invitation identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Invitation cancelled",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationInviteResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/invite/accept": {
        "post": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Accept invitation to organization",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAcceptInviteBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Invitation accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationInviteResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organizations": {
        "get": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Get organizations of user",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Organizations retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/OrganizationInformationsResponseDto"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}": {
        "get": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Get organization by ID",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Organization details retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationInformationsResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Update organization",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUpdateBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Organization updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationUpdateResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Delete organization",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Organization deleted",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationDeleteResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization": {
        "post": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Create organization",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCreateBodyDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Organization created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationCreateResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}/members": {
        "get": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Get organization members",
          "parameters": [
            {
              "description": "Page number",
              "required": true,
              "name": "page",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Number of items per page",
              "required": true,
              "name": "pageSize",
              "in": "query",
              "schema": {
                "minimum": 1,
                "maximum": 20,
                "type": "number"
              }
            },
            {
              "description": "Search query",
              "required": false,
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Organization members retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedUsersResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}/member": {
        "post": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Add member to organization",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAddMemberBodyDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Member added to organization",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationAddMemberResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Remove member from organization",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDeleteMemberBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Member removed from organization",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationDeleteMemberResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}/member/role": {
        "put": {
          "operationId": "OrganizationController_PropertyDescriptor",
          "summary": "Update organization member role",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization identifier",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUpdateRoleBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Member role updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationUpdateRoleResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}/projects": {
        "get": {
          "operationId": "ProjectController_PropertyDescriptor",
          "summary": "Get all projects of an organization with pagination",
          "parameters": [
            {
              "name": "search",
              "required": true,
              "in": "query",
              "description": "Search query",
              "schema": {
                "example": "my-project",
                "type": "string"
              }
            },
            {
              "name": "pageSize",
              "required": false,
              "in": "query",
              "description": "Page size",
              "schema": {
                "example": 10,
                "type": "number"
              }
            },
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "Page number",
              "schema": {
                "example": 1,
                "type": "number"
              }
            },
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "description": "Organization ID",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Projects found successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedProjectsAllInformationsResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/team/{teamId}/projects": {
        "get": {
          "operationId": "ProjectController_PropertyDescriptor",
          "summary": "Get all projects of a team with pagination",
          "parameters": [
            {
              "description": "Page number",
              "name": "page",
              "in": "query",
              "required": true,
              "schema": {
                "minimum": 1,
                "example": 1,
                "type": "number"
              }
            },
            {
              "description": "Number of items per page",
              "name": "pageSize",
              "in": "query",
              "required": true,
              "schema": {
                "minimum": 1,
                "maximum": 20,
                "example": 10,
                "type": "number"
              }
            },
            {
              "description": "Search query",
              "required": false,
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "description": "Team ID",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Projects found successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedProjectsResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}": {
        "get": {
          "operationId": "ProjectController_PropertyDescriptor",
          "summary": "Get a project",
          "parameters": [
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "description": "Project ID",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Project found successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectInformationsResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "operationId": "ProjectController_PropertyDescriptor",
          "summary": "Update a project",
          "parameters": [
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "description": "Project ID",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdateBodyDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Project updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectUpdateResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "operationId": "ProjectController_PropertyDescriptor",
          "summary": "Delete a project",
          "parameters": [
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "description": "Project ID",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Project deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectDeleteResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/team/{teamId}/project": {
        "post": {
          "operationId": "ProjectController_PropertyDescriptor",
          "summary": "Create a project",
          "parameters": [
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "description": "Team ID",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateBodyDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Project created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectInformationsResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}/team/{teamId}": {
        "get": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Get team by ID",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Team informations",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamInformationsResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}/teams": {
        "get": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Get all teams of an organization",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "All teams of an organization",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TeamInformationsResponseDto"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/organization/{organizationId}/team": {
        "post": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Create a new team",
          "parameters": [
            {
              "name": "organizationId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamCreateBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Team created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamCreateResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/team/{teamId}": {
        "put": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Update a team",
          "parameters": [
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUpdateBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Team updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamUpdateResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Delete a team",
          "parameters": [
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Team deleted",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamDeleteResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/team/{teamId}/member": {
        "post": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Add a member to a team",
          "parameters": [
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamAddMemberBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Member added to team",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamAddUserResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Remove a member from a team",
          "parameters": [
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRemoveUserBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Member removed from team",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamRemoveUserResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/team/{teamId}/member/role": {
        "put": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Update a member role in a team",
          "parameters": [
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTeamRoleBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Member role updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateTeamRoleResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/team/{teamId}/members": {
        "get": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Get all members of a team",
          "parameters": [
            {
              "description": "Page number",
              "name": "page",
              "in": "query",
              "required": true,
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Number of items per page",
              "name": "pageSize",
              "in": "query",
              "required": true,
              "schema": {
                "minimum": 1,
                "maximum": 20,
                "type": "number"
              }
            },
            {
              "description": "Search query",
              "required": false,
              "name": "search",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "All members of a team",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedUsersResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/team/{teamId}/member/{userId}": {
        "get": {
          "operationId": "TeamController_PropertyDescriptor",
          "summary": "Get a member of a team",
          "parameters": [
            {
              "name": "userId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "teamId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Member of a team",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserInformationsResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/scan/{scanId}": {
        "get": {
          "operationId": "ScanController_PropertyDescriptor",
          "summary": "Get a scan by ID",
          "parameters": [
            {
              "name": "scanId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Scan found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ScanResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "operationId": "ScanController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          }
        }
      },
      "/project/{projectId}/scan/start": {
        "post": {
          "operationId": "ScanController_PropertyDescriptor",
          "summary": "Start a scan",
          "parameters": [
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Scan started",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StartScanResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results": {
        "post": {
          "operationId": "ResultController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/project/{projectId}/sca-results": {
        "post": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Create a new SCA scan result",
          "parameters": [
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanAddScaResultBodyDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "SCA scan result created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ScanAddScaResultResponseDto"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results/sast": {
        "get": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Get all vulnerabilities of a project for SAST",
          "parameters": [
            {
              "description": "Sort field",
              "required": false,
              "name": "sort",
              "in": "query",
              "schema": {
                "enum": [
                  "currentState",
                  "currentSeverity",
                  "currentPriority",
                  "language",
                  "createdAt",
                  "updateAt"
                ],
                "type": "string"
              }
            },
            {
              "description": "Sort order",
              "required": false,
              "name": "order",
              "in": "query",
              "schema": {
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              }
            },
            {
              "description": "Filter by severity (repeat the param for multiple values, e.g. severity=critical&severity=high)",
              "required": false,
              "name": "severity",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "critical",
                    "high",
                    "medium",
                    "low"
                  ]
                }
              }
            },
            {
              "description": "Filter by status (repeat the param, e.g. status=to_verify&status=confirmed)",
              "required": false,
              "name": "status",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "to_verify",
                    "not_exploitable",
                    "proposed_not_exploitable",
                    "resolved",
                    "confirmed"
                  ]
                }
              }
            },
            {
              "description": "Filter by priority (repeat the param, e.g. priority=critical_urgent&priority=urgent)",
              "required": false,
              "name": "priority",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "critical_urgent",
                    "urgent",
                    "normal",
                    "low",
                    "very_low"
                  ]
                }
              }
            },
            {
              "description": "Programming language",
              "required": false,
              "name": "language",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Page number alias",
              "required": false,
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Page size alias",
              "required": false,
              "name": "pageSizeNumber",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Search query alias",
              "required": false,
              "name": "searchQuery",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "All vulnerabilities of a project",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GetProjectVulnerabilitiesResponseDto"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results/iac": {
        "get": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Get all IaC vulnerabilities of a project",
          "parameters": [
            {
              "description": "Sort field",
              "required": false,
              "name": "sort",
              "in": "query",
              "schema": {
                "enum": [
                  "currentState",
                  "currentSeverity",
                  "currentPriority",
                  "language",
                  "createdAt",
                  "updateAt"
                ],
                "type": "string"
              }
            },
            {
              "description": "Sort order",
              "required": false,
              "name": "order",
              "in": "query",
              "schema": {
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              }
            },
            {
              "description": "Filter by severity (repeat the param for multiple values, e.g. severity=critical&severity=high)",
              "required": false,
              "name": "severity",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "critical",
                    "high",
                    "medium",
                    "low"
                  ]
                }
              }
            },
            {
              "description": "Filter by status (repeat the param, e.g. status=to_verify&status=confirmed)",
              "required": false,
              "name": "status",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "to_verify",
                    "not_exploitable",
                    "proposed_not_exploitable",
                    "resolved",
                    "confirmed"
                  ]
                }
              }
            },
            {
              "description": "Filter by priority (repeat the param, e.g. priority=critical_urgent&priority=urgent)",
              "required": false,
              "name": "priority",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "critical_urgent",
                    "urgent",
                    "normal",
                    "low",
                    "very_low"
                  ]
                }
              }
            },
            {
              "description": "Programming language",
              "required": false,
              "name": "language",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Page number alias",
              "required": false,
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Page size alias",
              "required": false,
              "name": "pageSizeNumber",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Search query alias",
              "required": false,
              "name": "searchQuery",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "All IaC vulnerabilities of a project",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GetProjectVulnerabilitiesResponseDto"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results/sca": {
        "get": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Get all SCA vulnerabilities of a project",
          "parameters": [
            {
              "description": "Search query",
              "required": false,
              "name": "query",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Page number",
              "required": false,
              "name": "page",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Number of items per page",
              "required": false,
              "name": "limit",
              "in": "query",
              "schema": {
                "minimum": 10,
                "maximum": 25,
                "type": "number"
              }
            },
            {
              "description": "Sort field",
              "required": false,
              "name": "sort",
              "in": "query",
              "schema": {
                "enum": [
                  "currentState",
                  "currentSeverity",
                  "currentPriority",
                  "createdAt",
                  "updatedAt",
                  "currentCVSS"
                ],
                "type": "string"
              }
            },
            {
              "description": "Sort order",
              "required": false,
              "name": "order",
              "in": "query",
              "schema": {
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              }
            },
            {
              "description": "Filter by severity",
              "required": false,
              "name": "severity",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "critical",
                    "high",
                    "medium",
                    "low"
                  ]
                }
              }
            },
            {
              "description": "Filter by status",
              "required": false,
              "name": "status",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "to_verify",
                    "not_exploitable",
                    "proposed_not_exploitable",
                    "resolved",
                    "confirmed"
                  ]
                }
              }
            },
            {
              "description": "Programming language",
              "required": false,
              "name": "language",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by priority",
              "required": false,
              "name": "priority",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "critical_urgent",
                    "urgent",
                    "normal",
                    "low",
                    "very_low"
                  ]
                }
              }
            },
            {
              "description": "Page number alias",
              "required": false,
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Page size alias",
              "required": false,
              "name": "pageSizeNumber",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Search query alias",
              "required": false,
              "name": "searchQuery",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "All SCA vulnerabilities of a project",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GetProjectVulnerabilitiesResponseDto"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results/sca/packages": {
        "get": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Get all SCA packages of a project",
          "parameters": [
            {
              "description": "Search query",
              "required": false,
              "name": "query",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Page number",
              "required": false,
              "name": "page",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Number of items per page",
              "required": false,
              "name": "limit",
              "in": "query",
              "schema": {
                "minimum": 10,
                "maximum": 25,
                "type": "number"
              }
            },
            {
              "description": "Sort field",
              "required": false,
              "name": "sort",
              "in": "query",
              "schema": {
                "enum": [
                  "currentState",
                  "currentSeverity",
                  "currentPriority",
                  "createdAt",
                  "updatedAt",
                  "currentCVSS"
                ],
                "type": "string"
              }
            },
            {
              "description": "Sort order",
              "required": false,
              "name": "order",
              "in": "query",
              "schema": {
                "enum": [
                  "asc",
                  "desc"
                ],
                "type": "string"
              }
            },
            {
              "description": "Filter by severity",
              "required": false,
              "name": "severity",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "critical",
                    "high",
                    "medium",
                    "low"
                  ]
                }
              }
            },
            {
              "description": "Filter by status",
              "required": false,
              "name": "status",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "to_verify",
                    "not_exploitable",
                    "proposed_not_exploitable",
                    "resolved",
                    "confirmed"
                  ]
                }
              }
            },
            {
              "description": "Programming language",
              "required": false,
              "name": "language",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Filter by priority",
              "required": false,
              "name": "priority",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "critical_urgent",
                    "urgent",
                    "normal",
                    "low",
                    "very_low"
                  ]
                }
              }
            },
            {
              "description": "Page number alias",
              "required": false,
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Page size alias",
              "required": false,
              "name": "pageSizeNumber",
              "in": "query",
              "schema": {
                "minimum": 1,
                "type": "number"
              }
            },
            {
              "description": "Search query alias",
              "required": false,
              "name": "searchQuery",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "All SCA packages of a project",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GetProjectPackagesResponseDto"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results/sca/{vulnerabilityId}": {
        "get": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Get a vulnerability of a project for SCA",
          "parameters": [
            {
              "name": "vulnerabilityId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Vulnerability of a project",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetProjectVulnerabilityByIdResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results/sast/{vulnerabilityId}": {
        "get": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Get a vulnerability of a project for SAST",
          "parameters": [
            {
              "name": "vulnerabilityId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Vulnerability of a project",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetProjectVulnerabilityByIdResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results/iac/{vulnerabilityId}": {
        "get": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Get a vulnerability of a project for IaC",
          "parameters": [
            {
              "name": "vulnerabilityId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Vulnerability of a project",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetProjectVulnerabilityByIdResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results/{vulnerabilityId}": {
        "patch": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Update a vulnerability of a project",
          "parameters": [
            {
              "name": "vulnerabilityId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            },
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateResultBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Updated vulnerability",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetProjectVulnerabilityByIdResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/results/overview": {
        "get": {
          "operationId": "ResultController_PropertyDescriptor",
          "summary": "Get overview of a project",
          "parameters": [
            {
              "name": "projectId",
              "required": true,
              "in": "path",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Project overview",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetProjectOverviewResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/ai/conversation/start": {
        "post": {
          "operationId": "AiController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/project/{projectId}/ai/conversation/{idConversation}/message": {
        "post": {
          "operationId": "AiController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/project/{projectId}/vulnerability/{vulnerabilityId}/ai/autofix": {
        "post": {
          "operationId": "AiController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/project/{projectId}/ai/identify-variable": {
        "post": {
          "operationId": "AiController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/user/profile": {
        "get": {
          "operationId": "UserController_PropertyDescriptor",
          "summary": "Get user profile information",
          "parameters": [],
          "responses": {
            "200": {
              "description": "User profile information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetUserProfileResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "operationId": "UserController_PropertyDescriptor",
          "summary": "Update user profile",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserProfileBodyDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User profile information updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserUpdateResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Unauthorized",
                      "statusCode": 401,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "example": {
                      "message": "Forbidden",
                      "statusCode": 403,
                      "timestamp": "2025-02-18T12:31:18.491Z",
                      "path": "/example/path"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/project/{projectId}/vulnerabilities/rules": {
        "post": {
          "operationId": "VulnerabilityController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/webhooks/github": {
        "post": {
          "operationId": "WebhookController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/install": {
        "post": {
          "operationId": "GithubController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/organization/{organizationId}/github/installation": {
        "get": {
          "operationId": "GithubController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          }
        }
      },
      "/organization/{organizationId}/project/{projectId}/github/link": {
        "post": {
          "operationId": "GithubController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/organization/{organizationId}/project/{projectId}/github/unlink": {
        "delete": {
          "operationId": "GithubController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          }
        }
      },
      "/organization/{organizationId}/github/install/callback": {
        "post": {
          "operationId": "GithubController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/organization/{organizationId}/github/repositories": {
        "get": {
          "operationId": "GithubController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "200": {
              "description": ""
            }
          }
        }
      },
      "/project/{projectId}/github/start-scan": {
        "post": {
          "operationId": "GithubController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      },
      "/webhook/github": {
        "post": {
          "operationId": "GithubController_PropertyDescriptor",
          "parameters": [],
          "responses": {
            "201": {
              "description": ""
            }
          }
        }
      }
    },
    "info": {
      "title": "Cybedefend API",
      "description": "CybeDefend is an advanced API for application security analysis. Based on a microservices architecture using TypeScript and the NestJS framework, it communicates via Kafka to ensure cooperation between services. Key features include OAuth 2.0 authentication, user/organization/project management, and REBAC-based permissions. It excels in static, dynamic, and IaC security analyses (SAST, DAST, IaC, etc.) by integrating various open source tools.",
      "version": "1.0",
      "contact": {}
    },
    "tags": [],
    "servers": [
      {
        "url": "https://app-preprod.cybedefend.com"
      }
    ],
    "components": {
      "securitySchemes": {
        "bearer": {
          "scheme": "bearer",
          "bearerFormat": "JWT",
          "type": "http"
        }
      },
      "schemas": {
        "OrganizationInviteBodyDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Email of the person invited",
              "format": "email"
            },
            "role": {
              "type": "string",
              "description": "Role to assign",
              "enum": [
                "administrator",
                "manager",
                "billing_manager",
                "member"
              ]
            }
          },
          "required": [
            "email",
            "role"
          ]
        },
        "OrganizationInviteResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Invitation unique identifier",
              "format": "uuid"
            },
            "token": {
              "type": "string",
              "description": "Invitation token"
            },
            "email": {
              "type": "string",
              "description": "Email of the invitee"
            },
            "status": {
              "type": "string",
              "description": "Current status of the invitation"
            },
            "organizationId": {
              "type": "string",
              "description": "Organization unique identifier",
              "format": "uuid"
            },
            "organizationName": {
              "type": "string",
              "description": "Organization name"
            },
            "organizationRole": {
              "type": "string",
              "description": "Role in the organization"
            },
            "expiresAt": {
              "type": "string",
              "description": "Invitation expiration date",
              "format": "date-time"
            }
          },
          "required": [
            "id",
            "token",
            "email",
            "status",
            "organizationId",
            "organizationName",
            "organizationRole",
            "expiresAt"
          ]
        },
        "ErrorDto": {
          "type": "object",
          "properties": {
            "timestamp": {
              "type": "string",
              "example": "2025-02-18T12:31:18.491Z",
              "description": "Timestamp of the error"
            },
            "service": {
              "type": "string",
              "example": "AiService",
              "description": "Name of the service where the error occurred"
            },
            "method": {
              "type": "string",
              "example": "startConversation",
              "description": "Method name where the error occurred"
            },
            "message": {
              "type": "string",
              "example": "Invalid parameters provided",
              "description": "Error message"
            },
            "code": {
              "type": "number",
              "example": 400,
              "description": "HTTP status code",
              "minimum": 100,
              "maximum": 599
            }
          },
          "required": [
            "timestamp",
            "service",
            "method",
            "message",
            "code"
          ]
        },
        "GetOrganizationInvitationsResponseDto": {
          "type": "object",
          "properties": {
            "organizationId": {
              "type": "string",
              "description": "Organization unique identifier",
              "format": "uuid"
            },
            "invitations": {
              "type": "array",
              "items": {
                "description": "List of invitations",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrganizationInviteResponseDto"
                }
              }
            }
          },
          "required": [
            "organizationId",
            "invitations"
          ]
        },
        "OrganizationAcceptInviteBodyDto": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "Invite token"
            }
          },
          "required": [
            "token"
          ]
        },
        "OrganizationInformationsResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Organization unique identifier",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "Organization name"
            },
            "description": {
              "type": "string",
              "description": "Organization description"
            },
            "website": {
              "type": "string",
              "description": "Organization website"
            },
            "email": {
              "type": "string",
              "description": "Organization email"
            },
            "monthlyScanCount": {
              "type": "number",
              "description": "Organization monthly scan count"
            },
            "monthlyScanResetAt": {
              "type": "string",
              "description": "Organization monthly scan reset date",
              "format": "date-time"
            }
          },
          "required": [
            "id",
            "name",
            "description",
            "website",
            "email",
            "monthlyScanCount",
            "monthlyScanResetAt"
          ]
        },
        "OrganizationUpdateBodyDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Organization name"
            },
            "description": {
              "type": "string",
              "description": "Organization description"
            },
            "email": {
              "type": "string",
              "description": "Contact email",
              "format": "email"
            },
            "country": {
              "type": "string",
              "description": "Country"
            },
            "address": {
              "type": "string",
              "description": "Organization address"
            },
            "website": {
              "type": "string",
              "description": "Organization website"
            },
            "isActive": {
              "type": "boolean",
              "description": "Define if the organization is active"
            }
          },
          "required": [
            "name",
            "email",
            "country"
          ]
        },
        "OrganizationUpdateResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message describing the outcome"
            }
          },
          "required": [
            "message"
          ]
        },
        "OrganizationCreateBodyDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Organization name"
            },
            "description": {
              "type": "string",
              "description": "Organization description"
            },
            "email": {
              "type": "string",
              "description": "Contact email",
              "format": "email"
            },
            "country": {
              "type": "string",
              "description": "Country code (ISO 3166-1 alpha-2)"
            },
            "address": {
              "type": "string",
              "description": "Organization address"
            },
            "website": {
              "type": "string",
              "description": "Organization website"
            },
            "isActive": {
              "type": "boolean",
              "description": "Define if the organization is active"
            }
          },
          "required": [
            "name",
            "email",
            "country"
          ]
        },
        "OrganizationCreateResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Creation status message"
            },
            "organizationId": {
              "type": "string",
              "description": "Unique identifier of the created organization",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "Name of the organization"
            },
            "description": {
              "type": "string",
              "description": "Description of the organization"
            },
            "email": {
              "type": "string",
              "description": "Email address of the organization"
            }
          },
          "required": [
            "message",
            "organizationId",
            "name",
            "description",
            "email"
          ]
        },
        "OrganizationDeleteResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message describing the outcome"
            }
          },
          "required": [
            "message"
          ]
        },
        "PaginatedUsersResponseDto": {
          "type": "object",
          "properties": {
            "users": {
              "description": "List of users",
              "type": "array",
              "items": {
                "type": "array"
              }
            },
            "totalUsers": {
              "type": "number",
              "description": "Total number of users"
            },
            "totalPages": {
              "type": "number",
              "description": "Total number of pages"
            },
            "totalAdministrators": {
              "type": "number",
              "description": "Total number of administrators"
            }
          },
          "required": [
            "users",
            "totalUsers",
            "totalPages"
          ]
        },
        "OrganizationAddMemberBodyDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Member email address"
            },
            "role": {
              "type": "string",
              "description": "Role to assign to the member",
              "enum": [
                "administrator",
                "manager",
                "billing_manager",
                "member"
              ]
            }
          },
          "required": [
            "email",
            "role"
          ]
        },
        "OrganizationAddMemberResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message describing the outcome"
            },
            "userId": {
              "type": "string",
              "description": "Unique identifier of the user",
              "format": "uuid"
            }
          },
          "required": [
            "message",
            "userId"
          ]
        },
        "OrganizationUpdateRoleBodyDto": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "User unique identifier",
              "format": "uuid"
            },
            "role": {
              "type": "string",
              "description": "Role to assign",
              "enum": [
                "administrator",
                "manager",
                "billing_manager",
                "member"
              ]
            }
          },
          "required": [
            "userId",
            "role"
          ]
        },
        "OrganizationUpdateRoleResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message describing the outcome"
            }
          },
          "required": [
            "message"
          ]
        },
        "OrganizationDeleteMemberBodyDto": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "User unique identifier",
              "format": "uuid"
            }
          },
          "required": [
            "userId"
          ]
        },
        "OrganizationDeleteMemberResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message describing the outcome"
            }
          },
          "required": [
            "message"
          ]
        },
        "IssueCountResponseDto": {
          "type": "object",
          "properties": {
            "critical": {
              "type": "number",
              "description": "Number of critical issues"
            },
            "high": {
              "type": "number",
              "description": "Number of high-severity issues"
            },
            "medium": {
              "type": "number",
              "description": "Number of medium-severity issues"
            },
            "low": {
              "type": "number",
              "description": "Number of low-severity issues"
            }
          },
          "required": [
            "critical",
            "high",
            "medium",
            "low"
          ]
        },
        "AnalysisTypeResponseDto": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of analysis"
            },
            "lastScan": {
              "format": "date-time",
              "type": "string",
              "description": "Date of the last scan"
            },
            "source": {
              "type": "string",
              "description": "Analysis source"
            },
            "issuesCount": {
              "description": "Number of issues by severity",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IssueCountResponseDto"
                }
              ]
            }
          },
          "required": [
            "type",
            "lastScan",
            "source",
            "issuesCount"
          ]
        },
        "ProjectAllInformationsResponseDto": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "Project unique identifier",
              "format": "uuid"
            },
            "teamId": {
              "type": "string",
              "description": "Team unique identifier",
              "format": "uuid"
            },
            "teamName": {
              "type": "string",
              "description": "Team name"
            },
            "name": {
              "type": "string",
              "description": "Project name"
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
              "description": "Project creation date"
            },
            "updatedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Project update date"
            },
            "riskLevel": {
              "type": "string",
              "description": "Risk level of the project"
            },
            "issuesCount": {
              "description": "Number of issues by severity",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IssueCountResponseDto"
                }
              ]
            },
            "analyses": {
              "type": "array",
              "items": {
                "description": "List of analyses",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AnalysisTypeResponseDto"
                }
              }
            }
          },
          "required": [
            "projectId",
            "teamId",
            "teamName",
            "name",
            "createdAt",
            "updatedAt",
            "riskLevel",
            "issuesCount",
            "analyses"
          ]
        },
        "MainStatisticsResponseDto": {
          "type": "object",
          "properties": {
            "highRiskProjects": {
              "type": "number",
              "description": "Number of high risk projects"
            },
            "highRiskProjectsInLast7Days": {
              "type": "number",
              "description": "Number of high risk projects in the last 7 days"
            },
            "solvedIssues": {
              "type": "number",
              "description": "Number of solved issues"
            },
            "solvedIssuesInLast7Days": {
              "type": "number",
              "description": "Number of solved issues in the last 7 days"
            },
            "newIssues": {
              "type": "number",
              "description": "Number of new issues"
            },
            "newIssuesInLast7Days": {
              "type": "number",
              "description": "Number of new issues in the last 7 days"
            },
            "criticalIssues": {
              "type": "number",
              "description": "Number of critical issues"
            },
            "highIssues": {
              "type": "number",
              "description": "Number of high-severity issues"
            },
            "mediumIssues": {
              "type": "number",
              "description": "Number of medium-severity issues"
            },
            "lowIssues": {
              "type": "number",
              "description": "Number of low-severity issues"
            }
          },
          "required": [
            "highRiskProjects",
            "highRiskProjectsInLast7Days",
            "solvedIssues",
            "solvedIssuesInLast7Days",
            "newIssues",
            "newIssuesInLast7Days",
            "criticalIssues",
            "highIssues",
            "mediumIssues",
            "lowIssues"
          ]
        },
        "PaginatedProjectsAllInformationsResponseDto": {
          "type": "object",
          "properties": {
            "projects": {
              "type": "array",
              "items": {
                "description": "List of projects with all informations",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectAllInformationsResponseDto"
                }
              }
            },
            "totalProjects": {
              "type": "number",
              "description": "Total number of projects"
            },
            "totalPages": {
              "type": "number",
              "description": "Total number of pages"
            },
            "mainStatistics": {
              "description": "Main statistics",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MainStatisticsResponseDto"
                }
              ]
            }
          },
          "required": [
            "projects",
            "totalProjects",
            "totalPages",
            "mainStatistics"
          ]
        },
        "ProjectInformationsResponseDto": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "Project unique identifier",
              "format": "uuid"
            },
            "teamId": {
              "type": "string",
              "description": "Team unique identifier",
              "format": "uuid"
            },
            "teamName": {
              "type": "string",
              "description": "Team name"
            },
            "name": {
              "type": "string",
              "description": "Project name"
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
              "description": "Project creation date"
            },
            "updatedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Project last update date"
            },
            "applicationType": {
              "type": "string",
              "description": "Application type",
              "enum": [
                "web_application",
                "software",
                "mobile_application",
                "iot",
                "other"
              ]
            },
            "analysisFrequency": {
              "type": "string",
              "description": "Analysis frequency",
              "enum": [
                "weekly",
                "daily",
                "never"
              ]
            },
            "emailAlertEnabled": {
              "type": "boolean",
              "description": "Enable email alert"
            },
            "monthlyReportEnabled": {
              "type": "boolean",
              "description": "Enable monthly report"
            },
            "weeklyReportEnabled": {
              "type": "boolean",
              "description": "Enable weekly report"
            },
            "sastEnabled": {
              "type": "boolean",
              "description": "Enable SAST"
            },
            "dastEnabled": {
              "type": "boolean",
              "description": "Enable DAST"
            },
            "scaEnabled": {
              "type": "boolean",
              "description": "Enable SCA"
            },
            "containerEnabled": {
              "type": "boolean",
              "description": "Enable Container scan"
            },
            "apiEnabled": {
              "type": "boolean",
              "description": "Enable API scan"
            },
            "iacEnabled": {
              "type": "boolean",
              "description": "Enable IaC scan"
            },
            "sastFastScanEnabled": {
              "type": "boolean",
              "description": "Enable SAST fast scan"
            },
            "aiDataflowEnabled": {
              "type": "boolean",
              "description": "Enable AI dataflow"
            },
            "sastSeverities": {
              "type": "array",
              "description": "Allowed SAST severities",
              "items": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low"
                ]
              }
            },
            "scaSeverities": {
              "type": "array",
              "description": "Allowed SCA severities",
              "items": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low"
                ]
              }
            },
            "iacSeverities": {
              "type": "array",
              "description": "Allowed IaC severities",
              "items": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low"
                ]
              }
            },
            "incidentCreationOption": {
              "type": "string",
              "description": "Incident creation option"
            },
            "aiMergeRequestEnabled": {
              "type": "boolean",
              "description": "Enable AI merge request"
            },
            "improvingResultsEnabled": {
              "type": "boolean",
              "description": "Enable improving results"
            },
            "sortsVulnerabilitiesEnabled": {
              "type": "boolean",
              "description": "Enable sorting vulnerabilities"
            }
          },
          "required": [
            "projectId",
            "teamId",
            "teamName",
            "name",
            "createdAt",
            "updatedAt"
          ]
        },
        "PaginatedProjectsResponseDto": {
          "type": "object",
          "properties": {
            "projects": {
              "type": "array",
              "items": {
                "description": "List of projects",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectInformationsResponseDto"
                }
              }
            },
            "totalProjects": {
              "type": "number",
              "description": "Total number of projects"
            },
            "totalPages": {
              "type": "number",
              "description": "Total number of pages"
            }
          },
          "required": [
            "projects",
            "totalProjects",
            "totalPages"
          ]
        },
        "ProjectCreateBodyDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the project",
              "example": "My Project"
            }
          },
          "required": [
            "name"
          ]
        },
        "ProjectUpdateBodyDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Project name"
            },
            "teamId": {
              "type": "string",
              "description": "Team unique identifier",
              "format": "uuid"
            },
            "applicationType": {
              "type": "string",
              "description": "Type of the application",
              "enum": [
                "web_application",
                "software",
                "mobile_application",
                "iot",
                "other"
              ]
            },
            "analysisFrequency": {
              "type": "string",
              "description": "Analysis frequency",
              "enum": [
                "weekly",
                "daily",
                "never"
              ]
            },
            "emailAlertEnabled": {
              "type": "boolean",
              "description": "Enable email alert"
            },
            "monthlyReportEnabled": {
              "type": "boolean",
              "description": "Enable monthly report"
            },
            "weeklyReportEnabled": {
              "type": "boolean",
              "description": "Enable weekly report"
            },
            "sastEnabled": {
              "type": "boolean",
              "description": "Enable SAST scan"
            },
            "dastEnabled": {
              "type": "boolean",
              "description": "Enable DAST scan"
            },
            "scaEnabled": {
              "type": "boolean",
              "description": "Enable SCA scan"
            },
            "containerEnabled": {
              "type": "boolean",
              "description": "Enable Container scan"
            },
            "apiEnabled": {
              "type": "boolean",
              "description": "Enable API scan"
            },
            "iacEnabled": {
              "type": "boolean",
              "description": "Enable IaC scan"
            },
            "sastFastScanEnabled": {
              "type": "boolean",
              "description": "Enable SAST fast scan"
            },
            "aiDataflowEnabled": {
              "type": "boolean",
              "description": "Enable AI dataflow"
            },
            "sastSeverities": {
              "type": "array",
              "description": "Allowed SAST severities",
              "items": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low"
                ]
              }
            },
            "iacSeverities": {
              "type": "array",
              "description": "Allowed IaC severities",
              "items": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low"
                ]
              }
            },
            "scaSeverities": {
              "type": "array",
              "description": "Allowed SCA severities",
              "items": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low"
                ]
              }
            },
            "incidentCreationOption": {
              "type": "string",
              "description": "Incident creation option"
            },
            "aiMergeRequestEnabled": {
              "type": "boolean",
              "description": "Enable AI merge request"
            },
            "improvingResultsEnabled": {
              "type": "boolean",
              "description": "Enable improving results"
            },
            "sortsVulnerabilitiesEnabled": {
              "type": "boolean",
              "description": "Enable sorting vulnerabilities"
            }
          }
        },
        "ProjectUpdateResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the update was successful"
            },
            "message": {
              "type": "string",
              "description": "Message describing the result of the update"
            },
            "projectInformations": {
              "description": "Updated project informations",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProjectInformationsResponseDto"
                }
              ]
            }
          },
          "required": [
            "success",
            "message",
            "projectInformations"
          ]
        },
        "ProjectDeleteResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message describing the result of project deletion"
            }
          },
          "required": [
            "message"
          ]
        },
        "TeamInformationsResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Team unique identifier",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "Team name"
            },
            "description": {
              "type": "string",
              "description": "Team description"
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
              "description": "Team creation date"
            },
            "updatedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Team update date"
            }
          },
          "required": [
            "id",
            "name",
            "description",
            "createdAt",
            "updatedAt"
          ]
        },
        "TeamCreateBodyDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Team name"
            },
            "description": {
              "type": "string",
              "description": "Team description"
            }
          },
          "required": [
            "name",
            "description"
          ]
        },
        "TeamCreateResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if creation was successful"
            },
            "message": {
              "type": "string",
              "description": "Result message"
            },
            "organizationId": {
              "type": "string",
              "description": "Organization identifier"
            },
            "teamId": {
              "type": "string",
              "description": "Team identifier"
            },
            "name": {
              "type": "string",
              "description": "Team name"
            },
            "description": {
              "type": "string",
              "description": "Team description"
            }
          },
          "required": [
            "success",
            "message",
            "organizationId",
            "teamId",
            "name",
            "description"
          ]
        },
        "TeamUpdateBodyDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "New team name"
            },
            "description": {
              "type": "string",
              "description": "New team description"
            }
          },
          "required": [
            "name",
            "description"
          ]
        },
        "TeamUpdateResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message describing the update result"
            },
            "updatedTeam": {
              "description": "Updated team information",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TeamInformationsResponseDto"
                }
              ]
            }
          },
          "required": [
            "message",
            "updatedTeam"
          ]
        },
        "TeamDeleteResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message describing the result of deletion"
            }
          },
          "required": [
            "message"
          ]
        },
        "TeamAddMemberBodyDto": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "User unique identifier",
              "format": "uuid"
            },
            "role": {
              "type": "string",
              "description": "Role to assign to the member",
              "enum": [
                "team_manager",
                "analyst_developer",
                "developer",
                "read_only"
              ]
            }
          },
          "required": [
            "userId",
            "role"
          ]
        },
        "TeamAddUserResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Message describing the result"
            },
            "updatedTeam": {
              "description": "Updated team information",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TeamInformationsResponseDto"
                }
              ]
            }
          },
          "required": [
            "message",
            "updatedTeam"
          ]
        },
        "TeamRemoveUserBodyDto": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "User unique identifier",
              "format": "uuid"
            }
          },
          "required": [
            "userId"
          ]
        },
        "TeamRemoveUserResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the removal was successful"
            },
            "message": {
              "type": "string",
              "description": "Message describing the removal result"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "UpdateTeamRoleBodyDto": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string",
              "description": "User unique identifier",
              "format": "uuid"
            },
            "role": {
              "type": "string",
              "description": "Role to assign to the member",
              "enum": [
                "team_manager",
                "analyst_developer",
                "developer",
                "read_only"
              ]
            }
          },
          "required": [
            "userId",
            "role"
          ]
        },
        "UpdateTeamRoleResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if role update was successful"
            },
            "message": {
              "type": "string",
              "description": "Message describing the update result"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "UserInformationsResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "User unique identifier",
              "format": "uuid"
            },
            "firstName": {
              "type": "string",
              "description": "User first name"
            },
            "lastName": {
              "type": "string",
              "description": "User last name"
            },
            "email": {
              "type": "string",
              "description": "User email address",
              "format": "email"
            },
            "picture": {
              "type": "string",
              "description": "User picture URL"
            },
            "role": {
              "type": "string",
              "description": "User role in the organization"
            }
          },
          "required": [
            "id",
            "firstName",
            "lastName",
            "email",
            "picture",
            "role"
          ]
        },
        "ContainerDto": {
          "type": "object",
          "properties": {}
        },
        "ScanResponseDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Scan unique identifier",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "Name of the scan"
            },
            "state": {
              "type": "string",
              "description": "Current scan state",
              "enum": [
                "queued",
                "running",
                "completed",
                "failed"
              ]
            },
            "language": {
              "description": "Array of detected or target languages",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "projectId": {
              "type": "string",
              "description": "Project unique identifier",
              "format": "uuid"
            },
            "private": {
              "type": "boolean",
              "description": "Define if the scan is private"
            },
            "initializerUserId": {
              "type": "string",
              "description": "User ID who initialized the scan",
              "format": "uuid"
            },
            "createAt": {
              "type": "string",
              "description": "Creation date of the scan",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "description": "Last update date of the scan",
              "format": "date-time"
            },
            "scanType": {
              "type": "string",
              "description": "Scan type (optional)"
            },
            "startTime": {
              "format": "date-time",
              "type": "string",
              "description": "Date and time when the scan started"
            },
            "endTime": {
              "format": "date-time",
              "type": "string",
              "description": "Date and time when the scan ended"
            },
            "containers": {
              "type": "array",
              "items": {
                "description": "Array of containers used or involved in this scan",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContainerDto"
                }
              }
            },
            "progress": {
              "type": "number",
              "description": "Progress of the scan in percentage (0-100)"
            },
            "step": {
              "type": "string",
              "description": "Current step of the scan"
            },
            "vulnerabilityDetected": {
              "type": "number",
              "description": "Number of vulnerabilities detected (optional)"
            }
          },
          "required": [
            "id",
            "name",
            "state",
            "language",
            "projectId",
            "private",
            "createAt",
            "updatedAt",
            "containers",
            "progress",
            "step"
          ]
        },
        "StartScanResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Whether the scan started successfully"
            },
            "message": {
              "type": "string",
              "description": "Message describing the scan start result"
            },
            "detectedLanguages": {
              "description": "Detected languages (if any) during scan initialization",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "LibraryDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Library name"
            },
            "version": {
              "type": "string",
              "description": "Library version"
            },
            "file": {
              "type": "string",
              "description": "File where the library is declared"
            },
            "ecosystem": {
              "type": "string",
              "description": "Ecosystem type (npm, maven, etc.)"
            }
          },
          "required": [
            "name",
            "version",
            "file",
            "ecosystem"
          ]
        },
        "ScanAddScaResultBodyDto": {
          "type": "object",
          "properties": {
            "scanId": {
              "type": "string",
              "description": "Scan unique identifier",
              "format": "uuid"
            },
            "scannerName": {
              "type": "string",
              "description": "Scanner name (e.g. Snyk, OWASP)"
            },
            "isLastRequest": {
              "type": "boolean",
              "description": "Indicates if this is the last SCA request"
            },
            "vulnerabilityType": {
              "type": "string",
              "description": "Type of vulnerability (usually sca)"
            },
            "packages": {
              "type": "array",
              "items": {
                "description": "List of discovered packages or libraries",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LibraryDto"
                }
              }
            }
          },
          "required": [
            "scanId",
            "scannerName",
            "isLastRequest",
            "vulnerabilityType",
            "packages"
          ]
        },
        "ScanAddScaResultResponseDto": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "Project unique identifier"
            },
            "scanId": {
              "type": "string",
              "description": "Scan unique identifier"
            },
            "message": {
              "type": "string",
              "description": "Message describing the result of the SCA scan addition"
            }
          },
          "required": [
            "projectId",
            "scanId",
            "message"
          ]
        },
        "ScanProjectInfoDto": {
          "type": "object",
          "properties": {
            "scanId": {
              "type": "string",
              "description": "Scan unique identifier"
            },
            "state": {
              "type": "string",
              "description": "Scan state",
              "enum": [
                "queued",
                "running",
                "completed",
                "failed"
              ]
            },
            "createAt": {
              "type": "string",
              "description": "Date when the scan was created",
              "format": "date-time"
            },
            "scanType": {
              "type": "string",
              "description": "Type of the scan (optional)"
            }
          },
          "required": [
            "scanId",
            "state",
            "createAt"
          ]
        },
        "CountVulnerabilitiesCountByType": {
          "type": "object",
          "properties": {
            "sast": {
              "type": "number",
              "description": "Number of SAST vulnerabilities"
            },
            "iac": {
              "type": "number",
              "description": "Number of IaC vulnerabilities"
            },
            "sca": {
              "type": "number",
              "description": "Number of SCA vulnerabilities"
            }
          },
          "required": [
            "sast",
            "iac",
            "sca"
          ]
        },
        "GetProjectVulnerabilitiesResponseDto": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "Project unique identifier"
            },
            "projectName": {
              "type": "string",
              "description": "Project name"
            },
            "page": {
              "type": "number",
              "description": "Current page number",
              "minimum": 1
            },
            "limit": {
              "type": "number",
              "description": "Number of items per page",
              "minimum": 10,
              "maximum": 25
            },
            "totalPages": {
              "type": "number",
              "description": "Total number of pages"
            },
            "sort": {
              "type": "string",
              "description": "Field used for sorting",
              "enum": [
                "currentState",
                "currentSeverity",
                "currentPriority",
                "language",
                "createdAt",
                "updateAt"
              ]
            },
            "order": {
              "type": "string",
              "description": "Order of sorting",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "severity": {
              "type": "array",
              "description": "Filter by severity",
              "items": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low"
                ]
              }
            },
            "status": {
              "type": "array",
              "description": "Filter by vulnerability status",
              "items": {
                "type": "string",
                "enum": [
                  "to_verify",
                  "not_exploitable",
                  "proposed_not_exploitable",
                  "resolved",
                  "confirmed"
                ]
              }
            },
            "language": {
              "type": "string",
              "description": "Filter by programming language"
            },
            "priority": {
              "type": "array",
              "description": "Filter by priority levels",
              "items": {
                "type": "string",
                "enum": [
                  "critical_urgent",
                  "urgent",
                  "normal",
                  "low",
                  "very_low"
                ]
              }
            },
            "vulnerabilities": {
              "description": "List of vulnerabilities matching the filters",
              "additionalProperties": true,
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "total": {
              "type": "number",
              "description": "Total number of vulnerabilities found"
            },
            "scanProjectInfo": {
              "description": "Information about the ongoing or last scan",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ScanProjectInfoDto"
                }
              ]
            },
            "vulnCountByType": {
              "description": "Count of vulnerabilities grouped by type (SAST, SCA, IaC)",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CountVulnerabilitiesCountByType"
                }
              ]
            }
          },
          "required": [
            "projectId",
            "projectName",
            "page",
            "limit",
            "totalPages",
            "vulnerabilities",
            "total"
          ]
        },
        "ScaDetectedPackageDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the detected package"
            },
            "projectId": {
              "type": "string",
              "description": "Project unique identifier"
            },
            "packageName": {
              "type": "string",
              "description": "Name of the package"
            },
            "packageVersion": {
              "type": "string",
              "description": "Version of the package"
            },
            "fileName": {
              "type": "string",
              "description": "File name where the package was detected"
            },
            "ecosystem": {
              "type": "string",
              "description": "Ecosystem (npm, maven, etc.)"
            },
            "createdAt": {
              "type": "string",
              "description": "Date when the record was created"
            },
            "updatedAt": {
              "type": "string",
              "description": "Date when the record was updated"
            }
          },
          "required": [
            "id",
            "projectId",
            "packageName",
            "packageVersion",
            "fileName",
            "ecosystem",
            "createdAt",
            "updatedAt"
          ]
        },
        "GetProjectPackagesResponseDto": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "Project unique identifier"
            },
            "page": {
              "type": "number",
              "description": "Current page number"
            },
            "limit": {
              "type": "number",
              "description": "Number of items per page"
            },
            "total": {
              "type": "number",
              "description": "Total number of packages"
            },
            "totalPages": {
              "type": "number",
              "description": "Total number of pages"
            },
            "packages": {
              "type": "array",
              "items": {
                "description": "List of packages detected",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScaDetectedPackageDto"
                }
              }
            }
          },
          "required": [
            "projectId",
            "page",
            "limit",
            "total",
            "totalPages",
            "packages"
          ]
        },
        "GetProjectVulnerabilityByIdResponseDto": {
          "type": "object",
          "properties": {
            "projectId": {
              "type": "string",
              "description": "Project unique identifier",
              "format": "uuid"
            },
            "vulnerabilityId": {
              "type": "string",
              "description": "Vulnerability unique identifier",
              "format": "uuid"
            },
            "vulnerability": {
              "description": "Vulnerability object with a discriminator for SAST, IAC, or SCA",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/VulnerabilitySastDto"
                },
                {
                  "$ref": "#/components/schemas/VulnerabilityIacDto"
                },
                {
                  "$ref": "#/components/schemas/VulnerabilityScaDto"
                }
              ]
            }
          },
          "required": [
            "projectId",
            "vulnerabilityId",
            "vulnerability"
          ]
        },
        "UpdateResultBodyDto": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the vulnerability",
              "enum": [
                "to_verify",
                "not_exploitable",
                "proposed_not_exploitable",
                "resolved",
                "confirmed"
              ]
            },
            "priority": {
              "type": "string",
              "description": "Priority level",
              "enum": [
                "critical_urgent",
                "urgent",
                "normal",
                "low",
                "very_low"
              ]
            },
            "comment": {
              "type": "string",
              "description": "Comment about the vulnerability (max 512 chars)",
              "maxLength": 512
            },
            "userId": {
              "type": "string",
              "description": "User unique identifier that updates the vulnerability",
              "format": "uuid"
            }
          }
        },
        "TotalBySeverityDto": {
          "type": "object",
          "properties": {
            "severity": {
              "type": "string",
              "description": "Severity level"
            },
            "count": {
              "type": "number",
              "description": "Number of vulnerabilities for the given severity"
            }
          },
          "required": [
            "severity",
            "count"
          ]
        },
        "TotalByStateDto": {
          "type": "object",
          "properties": {
            "state": {
              "type": "string",
              "description": "State of the vulnerability"
            },
            "count": {
              "type": "number",
              "description": "Number of vulnerabilities for the given state"
            }
          },
          "required": [
            "state",
            "count"
          ]
        },
        "TotalByAnalysisTypeDto": {
          "type": "object",
          "properties": {
            "analysisType": {
              "type": "string",
              "description": "Type of analysis (SAST, IAC, SCA, etc.)"
            },
            "count": {
              "type": "number",
              "description": "Number of vulnerabilities for the given analysis type"
            }
          },
          "required": [
            "analysisType",
            "count"
          ]
        },
        "VulnerabilitiesOverTimeDto": {
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "description": "Date of the aggregation"
            },
            "severity": {
              "type": "number",
              "description": "Number of vulnerabilities for the given date"
            },
            "count": {
              "type": "number",
              "description": "Number of vulnerabilities for the given date"
            }
          },
          "required": [
            "date",
            "severity",
            "count"
          ]
        },
        "GetProjectOverviewResponseDto": {
          "type": "object",
          "properties": {
            "totalBySeverity": {
              "type": "array",
              "items": {
                "description": "Aggregation of vulnerabilities grouped by severity",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TotalBySeverityDto"
                }
              }
            },
            "totalByState": {
              "type": "array",
              "items": {
                "description": "Aggregation of vulnerabilities grouped by state",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TotalByStateDto"
                }
              }
            },
            "totalByAnalysisType": {
              "type": "array",
              "items": {
                "description": "Aggregation of vulnerabilities grouped by analysis type",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TotalByAnalysisTypeDto"
                }
              }
            },
            "vulnerabilitiesOverTime": {
              "type": "array",
              "items": {
                "description": "Number of vulnerabilities over time grouped by severity",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VulnerabilitiesOverTimeDto"
                }
              }
            }
          },
          "required": [
            "totalBySeverity",
            "totalByState",
            "totalByAnalysisType",
            "vulnerabilitiesOverTime"
          ]
        },
        "TeamDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Team unique identifier",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "Team name"
            },
            "myRole": {
              "type": "string",
              "description": "User role within the team"
            }
          },
          "required": [
            "id",
            "name",
            "myRole"
          ]
        },
        "OrganizationDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Organization unique identifier",
              "format": "uuid"
            },
            "name": {
              "type": "string",
              "description": "Organization name"
            },
            "description": {
              "type": "string",
              "description": "Organization description"
            },
            "myTeams": {
              "type": "array",
              "items": {
                "description": "List of teams within the organization",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TeamDto"
                }
              }
            },
            "myRole": {
              "description": "User role(s) within the organization",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "id",
            "name",
            "description",
            "myTeams",
            "myRole"
          ]
        },
        "GetUserProfileResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "User unique identifier",
              "format": "uuid"
            },
            "firstName": {
              "type": "string",
              "description": "User first name"
            },
            "email": {
              "type": "string",
              "description": "User email address",
              "format": "email"
            },
            "lastName": {
              "type": "string",
              "description": "User last name"
            },
            "picture": {
              "type": "string",
              "description": "User picture URL",
              "maxLength": 8192
            },
            "notification": {
              "type": "boolean",
              "description": "Enable or disable notifications"
            },
            "isOnboardingCompleted": {
              "type": "boolean",
              "description": "Indicates if the onboarding is completed"
            },
            "createdAt": {
              "format": "date-time",
              "type": "string",
              "description": "Date of account creation"
            },
            "updatedAt": {
              "format": "date-time",
              "type": "string",
              "description": "Date of last account update"
            },
            "myOrganizations": {
                "items": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
            },
            "monthlyScanCount": {
              "type": "number",
              "description": "Number of scans performed monthly"
            }
          },
          "required": [
            "id",
            "firstName",
            "email",
            "notification",
            "isOnboardingCompleted",
            "createdAt",
            "updatedAt",
            "myOrganizations",
            "monthlyScanCount"
          ]
        },
        "UpdateUserProfileBodyDto": {
          "type": "object",
          "properties": {
            "notification": {
              "type": "boolean",
              "description": "Enable or disable notifications for the user"
            },
            "isOnboardingCompleted": {
              "type": "boolean",
              "description": "Indicates whether onboarding is completed"
            }
          }
        },
        "UserUpdateResponseDto": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Result message"
            },
            "userId": {
              "type": "string",
              "description": "User unique identifier",
              "format": "uuid"
            }
          },
          "required": [
            "message",
            "userId"
          ]
        }
      }
    }
  }